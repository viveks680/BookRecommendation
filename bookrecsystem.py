# -*- coding: utf-8 -*-
"""BookRecSystem.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PJDQiR8oGlNLkeS9e3a31OsDa0h_JIbP
"""

#Description: Build a book recomendation engine using python

#Import the libraries

import pandas as pd
import numpy as np
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.feature_extraction.text import CountVectorizer

#Load Data
from google.colab import files
files.upload()

#Store data
df = pd.read_csv('books.csv', encoding='unicode_escape', error_bad_lines=False)

#Show data
df

#Create a list of columns to keep
columns = ['title','authors']

#Function to combine important columns
def combine_features(data):
  features = []
  for i in range(0, data.shape[0]):
    features.append(data['title'][i]+ ' ' +data['authors'][i])
  
  return features

#Create column to store combines features
df['combine_features']=combine_features(df)
#show df
df

#Convert text from new column to matrix of word counts

cm = CountVectorizer().fit_transform(df['combine_features'])

#Get cosine similarity matrix from count matrix
cs = cosine_similarity(cm)

#Print scores
print(cs)

#Get title of book from reader
Title = df['title'][1]
#show title
Title

#Find book id of the book user likes
bookID = df[df.title == Title]['bookID'].values[0]
#show book id
bookID

#Create a list of tuples in the form (Author,Similarity Score)
scores = list(enumerate(cs[bookID]))
print(scores)

#sort list of similar books in descending order
sorted_scores = sorted(scores, key = lambda x:x[1] , reverse=True)
#sorted_scores = sorted_scores[1:]

sorted_scores

#Create loop to print first 5 books from sorted List
j = 0
print('The 5 most recommended books to '+Title+' are:\n')
for item in sorted_scores:
  book_title = df[df.bookID == item[0]]['title'].values[0]
  print(j+1 , book_title)
  j = j+1
  if(j>=5):
    break